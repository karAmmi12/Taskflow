// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String    @id @default(uuid())
  email     String    @unique
  password  String  
  name      String
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  tasks     Task[]
  applications  Application[]
  jobAlerts     JobAlert[]
  jobOffers     JobOffer[]
  profile       UserProfile?        
  documents     GeneratedDocument[] 
  
  @@map("users")

}

model Task {
  id              String    @id @default(uuid())
  title           String
  description     String?
  status          String    @default("todo") // todo, in_progress, done
  priority        String    @default("medium") // low, medium, high
  tags            String[]  @default([])
  dueDate     DateTime?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  userId      String
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@index([userId])
  @@index([status])
}

model Application {
  id              String    @id @default(uuid())
  title           String    // Poste visé
  company         String    // Entreprise
  type            String    // "stage" ou "emploi"
  status          String    @default("applied") // applied, interview, rejected, accepted
  applicationDate DateTime  @default(now())
  interviewDate   DateTime?
  notes           String?
  contactName     String?
  contactEmail    String?
  contactPhone    String?
  jobUrl          String?   // URL de l'offre
  salary          String?   // Salaire proposé
  location        String?   // Lieu
  followUpDate    DateTime? // Date de relance
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  
  userId          String
  user            User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@index([userId])
  @@index([status])
  @@index([type])
}

model JobOffer {
  id          String    @id @default(uuid())
  externalId  String    // ID de l'offre sur l'API externe
  title       String    // Titre du poste
  company     String    // Entreprise
  location    String?   // Localisation
  salary      String?   // Salaire
  contract    String?   // Type de contrat
  description String?   // Description
  url         String    // URL vers l'offre
  source      String    // Source (Adzuna, JobTome, etc.)
  publishedAt DateTime  // Date de publication
  matchScore  Int       @default(0) // Score de pertinence
  isRead      Boolean   @default(false) // Lu par l'utilisateur
  isSaved     Boolean   @default(false) // Sauvegardé par l'utilisateur
  isApplied   Boolean   @default(false) // Candidature envoyée
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  alertId     String    // Alerte qui a généré cette offre
  alert       JobAlert  @relation(fields: [alertId], references: [id], onDelete: Cascade)
  
  userId      String
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([externalId, source]) // Éviter les doublons
  @@index([userId])
  @@index([alertId])
  @@index([publishedAt])
  @@index([matchScore])
}

model JobAlert {
  id          String    @id @default(uuid())
  title       String    // Titre de l'alerte (ex: "Développeur React")
  keywords    String[]  @default([]) // Mots-clés de recherche
  location    String?   // Localisation
  company     String?   // Entreprise ciblée
  salary      String?   // Fourchette salariale
  contract    String?   // Type de contrat (CDI, stage, etc.)
  active      Boolean   @default(true) // Alerte active ou non
  frequency   String    @default("daily") // daily, weekly
  lastCheck   DateTime? // Dernière vérification
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  userId      String
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  offers      JobOffer[] // Offres trouvées par cette alerte

  @@index([userId])
  @@index([active])
}

model UserProfile {
  id          String    @id @default(uuid())
  userId      String    @unique
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  // Informations personnelles
  phone       String?
  address     String?
  linkedin    String?
  github      String?
  website     String?
  summary     String?   // Résumé professionnel
  
  // Expériences (JSON)
  experiences Json[]    @default([])
  
  // Formation (JSON)
  education   Json[]    @default([])
  
  // Compétences
  skills      String[]  @default([])
  
  // Langues (JSON avec niveau)
  languages   Json[]    @default([])
  
  // Loisirs/Centres d'intérêt
  hobbies     String[]  @default([])
  
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  
  // Relations avec les documents générés
  documents   GeneratedDocument[]
}

model GeneratedDocument {
  id            String      @id @default(uuid())
  type          String      // 'cv' ou 'cover_letter'
  filename      String
  filePath      String
  latexSource   String?     // Code LaTeX source
  
  // Métadonnées
  template      String?     // Template utilisé
  options       Json        @default("{}") // Options de génération
  
  // Relations
  userId        String
  user          User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  userProfileId String?
  userProfile   UserProfile? @relation(fields: [userProfileId], references: [id])
  
  jobOfferId    String?     // Pour les lettres de motivation
  
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
  
  @@index([userId])
  @@index([type])
}

