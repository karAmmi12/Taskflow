include .env
export

.PHONY: help setup dev prod stop clean logs validate-env migrate db-reset

help: ## Afficher l'aide
	@echo "TaskFlow - Commandes disponibles:"
	@grep -E '^[a-zA-Z_-]+:.*?## .*$$' $(MAKEFILE_LIST) | sort | awk 'BEGIN {FS = ":.*?## "}; {printf "\033[36m%-15s\033[0m %s\n", $$1, $$2}'

setup: ## Configuration initiale
	@./scripts/setup.sh

validate-env: ## Valider les variables d'environnement
	@./scripts/validate-env.sh

dev: ## D√©marrer en mode d√©veloppement
	@./scripts/dev.sh

prod: ## D√©marrer en mode production
	@./scripts/prod.sh

stop: ## Arr√™ter tous les services
	@./scripts/stop.sh

clean: ## Nettoyer containers et volumes
	@./scripts/clean.sh

logs: ## Afficher les logs de production
	@docker-compose logs -f

logs-dev: ## Afficher les logs de d√©veloppement
	@docker-compose -f docker-compose.dev.yml logs -f

migrate: ## Ex√©cuter les migrations Prisma
	@echo "üîÑ Ex√©cution des migrations Prisma..."
	@docker-compose exec backend npx prisma migrate deploy

migrate-dev: ## Ex√©cuter les migrations Prisma en mode dev
	@echo "üîÑ Ex√©cution des migrations Prisma (dev)..."
	@docker-compose -f docker-compose.dev.yml exec backend-dev npx prisma migrate dev

db-reset: ## R√©initialiser la base de donn√©es
	@echo "‚ö†Ô∏è  ATTENTION: Cette action va supprimer toutes les donn√©es !"
	@read -p "√ätes-vous s√ªr ? (y/N): " confirm && [ "$$confirm" = "y" ]
	@docker-compose down
	@docker volume rm $(POSTGRES_VOLUME) 2>/dev/null || true
	@echo "‚úÖ Base de donn√©es r√©initialis√©e"

db-reset-dev: ## R√©initialiser la base de donn√©es (dev)
	@echo "‚ö†Ô∏è  ATTENTION: Cette action va supprimer toutes les donn√©es de d√©veloppement !"
	@read -p "√ätes-vous s√ªr ? (y/N): " confirm && [ "$$confirm" = "y" ]
	@docker-compose -f docker-compose.dev.yml down
	@docker volume rm $(POSTGRES_DEV_VOLUME) 2>/dev/null || true
	@echo "‚úÖ Base de donn√©es de d√©veloppement r√©initialis√©e"

shell-backend: ## Acc√©der au shell du backend
	@docker-compose exec backend sh

shell-backend-dev: ## Acc√©der au shell du backend (dev)
	@docker-compose -f docker-compose.dev.yml exec backend-dev sh

shell-db: ## Acc√©der au shell PostgreSQL
	@docker-compose exec postgres psql -U $(POSTGRES_USER) -d $(POSTGRES_DB)

shell-db-dev: ## Acc√©der au shell PostgreSQL (dev)
	@docker-compose -f docker-compose.dev.yml exec postgres psql -U $(POSTGRES_USER) -d $(POSTGRES_DB)

ps: ## Voir les containers en cours
	@docker-compose ps

ps-dev: ## Voir les containers de dev en cours
	@docker-compose -f docker-compose.dev.yml ps

build: ## Reconstruire les images sans cache
	@docker-compose build --no-cache

build-dev: ## Reconstruire les images de dev sans cache
	@docker-compose -f docker-compose.dev.yml build --no-cache

restart: ## Red√©marrer les services
	@docker-compose restart

restart-dev: ## Red√©marrer les services de dev
	@docker-compose -f docker-compose.dev.yml restart